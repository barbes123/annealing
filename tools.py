###### DO NOT FORGET FOR SIMCALL##########
#start android debugging server: sudo adb start-server
#stop android debugging server: sudo adb kill-server

from ppadb.client import Client as AdbClient
import time
from bs4 import BeautifulSoup
import urllib.request
from IPython.display import HTML
import smtplib
import os



#line battery 





#Reading battery remaining time from UPS station. Input: json configuration file as json_object in dictionary python format.
def UPS_rd(json_object):

    #Making request to ip.
    r = urllib.request.urlopen(json_object["Call-Monitor_Variables"]["UPS_address"]).read()
    #Formatting extracted text
    soup = BeautifulSoup(r,"lxml")

    #Extracting specific value of remaining time
    data_vec=soup.prettify()[17:400].split("\n")
    remaining_time=data_vec[12]
    mode=data_vec[1]
    print(remaining_time,mode)
    return int(remaining_time), mode





#Send email function with json file working OK. Input: json configuration file as dictionary, condition (selects type of message).
def SendEmail(json_object,condition):
    
    #Extracting necessary variables from json_object
    EMAIL_ADDRESS=json_object["Email_credentials"]["email_sender"]
    EMAIL_PASSWORD=json_object["Email_credentials"]["password_sender"]
    EMAIL_ARRAY_RECEIVER=json_object["Email_credentials"]["email_receiver"]


    #Making connection to SMTP server
    with smtplib.SMTP('smtp.gmail.com',587) as smtp:
        smtp.ehlo()
        smtp.starttls()
        smtp.ehlo()

        #If connection successfull logging in with sender email credentials.
        smtp.login(EMAIL_ADDRESS,EMAIL_PASSWORD)


        #Checking condition to make choices of messages.
        if condition == "UPS":
            subject="UPS PROBLEM DETECTED!!!!"
            body="This is an email generated by annealing monitoring program. \n Information: UPS is not responding in network.\n Cannot contact device in case of power outage.\n Please check situation"
            print("Email: Failed connection to UPS.")

        elif condition == "INF":
            subject="INFLUXDATABASE PROBLEM DETECTED!!!!"
            body="This is an email generated by annealing monitoring program. \n Information: Could not access influxdb database. Problem detected with software. Call George Nitescu 0734260029 immediately."
            print("Email: Problem with InfluxDB.")

        elif condition == "CALL":
            subject="SIMCALL PROBLEM DETECTED!!!!"
            body="This is an email generated by annealing monitoring program. \n Information: Alarm was triggered, but call was not initiated, due to server errors! Presence at ELI-NP required ASAP."
            print("Email: Problem detected. Phone not detected.")

        msg=f'Subject:{subject}\n\n{body}'


        #Sending emails to all emails in the email array
        for email in EMAIL_ARRAY_RECEIVER:
            smtp.sendmail(EMAIL_ADDRESS,email,msg)

            time.sleep(0.5)


    






#Function to send email when json file fails to load.
def SendEmail_mem():

    #Extracting necessary variables from json_object
    EMAIL_ADDRESS="grafanaalarmingservice@gmail.com"
    EMAIL_PASSWORD="Analiza_E8"
    EMAIL_ARRAY_RECEIVER=["gnitescu4@gmail.com"]


    #Making connection to SMTP server
    with smtplib.SMTP('smtp.gmail.com',587) as smtp:
        smtp.ehlo()
        smtp.starttls()
        smtp.ehlo()

        #If connection successfull logging in with sender email credentials.
        smtp.login(EMAIL_ADDRESS,EMAIL_PASSWORD)
       

        #Writing message and subject
        subject="CONFIGURATION FILE PROBLEM DETECTED!!!!"
        body="This is an email generated by annealing monitoring program. \n Information: Configuration file couldn't be opened. Bug detected or corrupt memory. Check if code is still functioning.\n If not call George Nitescu, 0734260029"


        msg=f'Subject:{subject}\n\n{body}'


        #Sending emails to all emails in the email array
        for email in EMAIL_ARRAY_RECEIVER:
            smtp.sendmail(EMAIL_ADDRESS,email,msg)

            time.sleep(0.5)


    print("Email: Problem detected. JSON file did not load.")

    #Call function. Input: one phone number
def SIMCall (phone, json_object):
    adb_ok=0
    #Make connection to adb server running on localhost and connected phone.
    try:
        client=AdbClient(host="127.0.0.1", port=5037)
        devices=client.devices()
        device=devices[0]
        adb_ok=1
	
        
    except Exception as e:
        
        print("Problem detected with ADB server. Calls will not be active! Reason: "+str(e))
        time.sleep(30)
        adb_ok=0
    

    #Checking if localhost detected connected phone.
    if devices and adb_ok:
        time.sleep(5)
        os.system(f'adb shell am start -a android.intent.action.CALL -d tel:{phone}')
        print("Initiating call!\n")
        time.sleep(30)
        device.shell("input keyevent 6")
        
    else:
        print("\nNo devices connected!\n")
        print("Call was not initiated. Major Alarm Problem.")
        SendEmail(json_object, "CALL")

    
